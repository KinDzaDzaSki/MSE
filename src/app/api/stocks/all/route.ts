import { NextResponse } from 'next/server'
import { Stock, ApiResponse } from '@/lib/types'

let cachedAllStocks: Stock[] = []
let lastDiscoveryUpdate: Date | null = null
const DISCOVERY_CACHE_DURATION = 30 * 60 * 1000 // 30 minutes cache

export async function GET(): Promise<NextResponse<ApiResponse<{
  stocks: Stock[]
  discoveryTimestamp: string
  totalCompanies: number
  activeCompanies: number
}>>> {
  try {
    const now = new Date()
    const shouldRunDiscovery = !lastDiscoveryUpdate || 
      (now.getTime() - lastDiscoveryUpdate.getTime()) > DISCOVERY_CACHE_DURATION

    let stocks: Stock[] = []

    if (shouldRunDiscovery || cachedAllStocks.length === 0) {
      console.log('üîç Building complete company list with active trading data...')
      
      // List of all 22 configured companies
      const allConfiguredSymbols = [
        'ALK', 'KMB', 'TNB', 'STB', 'TEL', 'MPT', 'GRNT', 'REPL',
        'MTUR', 'UNI', 'USJE', 'VITA', 'OKTA', 'STIL', 'FERS',
        'AUMK', 'TETE', 'PPIV', 'TIGA', 'RZLE', 'SBT', 'RZUS'
      ]
      
      // Company name mapping
      const companyNames: Record<string, string> = {
        'ALK': '–ê–ª–∫–∞–ª–æ–∏–¥ –°–∫–æ–ø—ò–µ',
        'KMB': '–ö–æ–º–µ—Ä—Ü–∏—ò–∞–ª–Ω–∞ –±–∞–Ω–∫–∞ –°–∫–æ–ø—ò–µ',
        'TNB': '–¢—É—Ç—É–Ω—Å–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ç –ü—Ä–∏–ª–µ–ø',
        'STB': '–°—Ç–æ–ø–∞–Ω—Å–∫–∞ –±–∞–Ω–∫–∞ –°–∫–æ–ø—ò–µ',
        'TEL': '–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏ –¢–µ–ª–µ–∫–æ–º –°–∫–æ–ø—ò–µ',
        'MPT': '–ú–∞–∫–ø–µ—Ç—Ä–æ–ª –°–∫–æ–ø—ò–µ',
        'GRNT': '–ì—Ä–∞–Ω–∏—Ç –°–∫–æ–ø—ò–µ',
        'REPL': '–†–µ–ø–ª–µ–∫ –°–∫–æ–ø—ò–µ',
        'MTUR': '–ú–∞–∫–µ–¥–æ–Ω–∏—ò–∞—Ç—É—Ä–∏—Å—Ç –°–∫–æ–ø—ò–µ',
        'UNI': '–£–Ω–∏–≤–µ—Ä–∑–∞–ª–Ω–∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–∞ –ë–∞–Ω–∫–∞ –°–∫–æ–ø—ò–µ',
        'USJE': '–¢–ò–¢–ê–ù –£–°–à–ï –ê–î –°–∫–æ–ø—ò–µ',
        'VITA': '–í–∏—Ç–∞–º–∏–Ω–∫–∞ –ü—Ä–∏–ª–µ–ø',
        'OKTA': '–û–ö–¢–ê –°–∫–æ–ø—ò–µ',
        'STIL': '–°—Ç–∏–ª –°–∫–æ–ø—ò–µ',
        'FERS': '–§–µ—Ä—Å –°–∫–æ–ø—ò–µ',
        'AUMK': '–ê—É—Ä–µ–º–∞—Ä–∫ –°–∫–æ–ø—ò–µ',
        'TETE': '–¢–µ—Ç–µ –°–∫–æ–ø—ò–µ',
        'PPIV': '–ü–ü–ò–í –°–∫–æ–ø—ò–µ',
        'TIGA': '–¢–∏–≥–∞ –°–∫–æ–ø—ò–µ',
        'RZLE': '–†–ñ –õ–µ—Å–Ω–æ–≤—Å–∫–∞ –°–∫–æ–ø—ò–µ',
        'SBT': '–°–ë–¢ –°–∫–æ–ø—ò–µ',
        'RZUS': '–†–ñ –£—Å–ª—É–≥–∏ –°–∫–æ–ø—ò–µ'
      }

      try {
        // Get active trading data from the regular endpoint
        const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/stocks`)
        const result = await response.json()
        
        const activeStocks: Stock[] = result.success ? result.data.stocks : []
        const activeStockMap = new Map(activeStocks.map(stock => [stock.symbol, stock]))
        
        console.log(`üìä Found ${activeStocks.length} active stocks from trading data`)
        
        // Create complete list with active + inactive companies
        stocks = allConfiguredSymbols.map(symbol => {
          const activeStock = activeStockMap.get(symbol)
          
          if (activeStock) {
            console.log(`‚úÖ ${symbol}: Active with trading data`)
            return activeStock
          } else {
            console.log(`ÔøΩ ${symbol}: Added as inactive (no trading data)`)
            return {
              id: `placeholder-${symbol}`,
              symbol: symbol,
              name: companyNames[symbol] || `${symbol} Company`,
              price: 0,
              change: 0,
              changePercent: 0,
              volume: 0,
              lastUpdated: new Date().toISOString()
            }
          }
        })
        
        cachedAllStocks = stocks
        lastDiscoveryUpdate = now
        
      } catch (error) {
        console.error('‚ùå Error fetching active stock data:', error)
        
        // Create list with all companies as inactive
        stocks = allConfiguredSymbols.map(symbol => ({
          id: `placeholder-${symbol}`,
          symbol: symbol,
          name: companyNames[symbol] || `${symbol} Company`,
          price: 0,
          change: 0,
          changePercent: 0,
          volume: 0,
          lastUpdated: new Date().toISOString()
        }))
      }
      
    } else {
      console.log('üìã Using cached complete company list')
      stocks = cachedAllStocks
    }

    // Calculate statistics
    const activeCompanies = stocks.filter(s => s.price > 0).length
    const totalCompanies = stocks.length
    
    console.log(`üéØ Returning ${totalCompanies} companies total (${activeCompanies} active, ${totalCompanies - activeCompanies} inactive)`)

    return NextResponse.json({
      success: true,
      data: {
        stocks: stocks.sort((a, b) => a.symbol.localeCompare(b.symbol)),
        discoveryTimestamp: lastDiscoveryUpdate?.toISOString() || new Date().toISOString(),
        totalCompanies,
        activeCompanies
      }
    })

  } catch (error) {
    console.error('‚ùå All companies API error:', error)
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    }, { status: 500 })
  }
}